/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SchoolMgtSysInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "getAllStudents"
      | "getStudent"
      | "nextStudentId"
      | "registerStudent"
      | "removeStudent"
      | "students"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextStudentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextStudentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
}

export interface SchoolMgtSys extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolMgtSys;
  waitForDeployment(): Promise<this>;

  interface: SchoolMgtSysInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  getAllStudents: TypedContractMethod<[], [bigint[]], "view">;

  getStudent: TypedContractMethod<
    [studentId: BigNumberish],
    [[bigint, string]],
    "view"
  >;

  nextStudentId: TypedContractMethod<[], [bigint], "view">;

  registerStudent: TypedContractMethod<[name: string], [void], "nonpayable">;

  removeStudent: TypedContractMethod<
    [studentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  students: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        id: bigint;
        name: string;
        registered: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllStudents"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStudent"
  ): TypedContractMethod<[studentId: BigNumberish], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "nextStudentId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeStudent"
  ): TypedContractMethod<[studentId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        id: bigint;
        name: string;
        registered: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
